# 생각순서
# 1. 우리가 만들고자 하는 프로그램의 저장할 데이터를 생각 ,
# 카테고리(커피,음료,주스,스무디)
# 제품(아메리카노,사과주스,콜라,모카치노)
# 주문(102 아메리카노 2개,103 메론스무디 1개,콜라 1개)

# 2. 데이터들을 어떻게 관리/구분/처리
	# 카페 알바생-종이 장부
    # 아메리카노 1개 팔리면 어떻게 작성하지? 정답x

# 3. (정규화) 중복을 최소화 , 메모리를 효율성있게 아껴 쓸려고
create database mydb1121;
use mydb1121;
		# 카테고리 테이블(카테고리 필드)
create table 카테고리(카테고리명 char(10));
        # 제품 테이블(제품명필드,가격필드)
create table 제품(제품명 varchar(50) , 가격 int);
        # 주문 테이블(주문 날짜)
create table 주문(주문날짜 date);
        # 주문상세 테이블(제품명,주문수량)
create table 주문상세(주문수량 int);

# 4. (관계),관계형[서로 다른 테이블 간의 종속] 데이터베이스 , 왜? 서로 다른 테이블 간의 연결()
create table 카테고리(카테고리번호pk int,카테고리명 char(10)); 				# 상위테이블
create table 제품(제품번호pk varchar(50) , 가격 int , 카테고리번호pk int);	# 하위테이블

create table 주문(주문번호pk int , 주문날짜 date);						# 상위테이블
create table 주문상세(주문상세번호pk int , 주문수량 int , 주문번호pk int , 제품번호pk int); # 하위테이블
## 관례적으로 모든 테이블에는 1개이상의 식별데이터/번호가 존재한다. (기본키-pk)
## pk가 다른 테이블에서 사용/참조한다. (참조키-pk)

# [제약 조건]
	# 1. not null : 해당 필드에 null 값을 포함하지 않는다.
    # 2. default 초기값 : 해당 필드에 레코드(값) 삽입시 비어있는 경우 초기값을 삽입한다.
    # 3. unique : 해당 필드에 중복된 값을 허용하지 않는다. [중복제거] 레코드 삽입시 데이터가 중복이면 오류 발생
    # 4. auto_increment : 해당 필드에 레코드 삽입시 자동으로 순서대로 번호가 자동 삽입된다. (oracle)
    # 5. primary key : 테이블의 식별필드 , (기본 키-pk) 식별 가능한 고유 값을 가진 키. 참조 받는 키
		# primary key(pk필드명)
	# 6. foreign key : 테이블의 참조필드 , (참조 키-fk) 다른 테이블 내 기본키를 참조 하는 키
		# foreign key(fk필드명) references 참조테이블(pk필드명)
    # 관례적으로 모든 테이블은 1개 이상의 pk필드를 갖는다.

# 회원제 게시판 (회원 테이블,게시판 테이블 = 종속 관계 파악 , [O]회원[상위]이 게시물[하위]을 작성 vs [X]게시물이 회원을 작성)
    create table 회원테이블(
    회원번호pk int unsigned not null auto_increment, # 회원번호는 일반적으로 가입순서대로 1 ~ 저장하기 위해서 int 사용
	# unsigned : [부호가없다뜻] int(+-21억) int unsigned(42억)
    아이디 varchar(30), # 아이디는 최대 30글자만 입력받을 예정, varchar(30) 사용
	비밀번호 varchar(30), # 비밀번호는 최대 20글자만 입력받을 예정, char(20) 사용
    연락처 char(13), # 010-1234-5678 식으로 받을 예정, char(13) 사용
    광고전송여부 boolean,
    가입일 datetime,
    primary key(회원번호)); # 지정한 필드를 pk(기본키)로 사용한다.
								# 회원번호 사용 이유:용량이 작고 중복을 배제하기 위해

# 임의 테이블 생성 , create table 테이블명(필드명 타입,필드명 타입);
	create table 게시물테이블(
    게시물번호 int unsigned not null auto_increment, # 게시물 번호는 일반적으로 1~ 저장하기 때문
    게시물제목 varchar(100), 	# 게시물 제목은 적당하게 최대 100글자 정도로
    게시물내용 longtext, 	# 게시물 내용은 많은 데이터를 저장하기 위해 longtext
    게시물작성자 int, 		# 게시물작성자가 아이디가 아니고 회원번호인 이유는 회원본호를 통해 아이디
			# EX) 동사무소에 가면 주민등록번호만 말해도 내 신상정보를 공무원이 볼 수 있다.
    foreign key(게시물작성자회원번호fk) references 회원테이블(회원번호pk),
    primary key(게시물번호));